{{- if .Values.haulerRegistry.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hauler-registry
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "hauler.labels" . | nindent 4 }}
    {{- with .Values.hauler.labels -}}
{{ toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- with .Values.hauler.annotations -}}
{{ toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: {{ .Values.haulerRegistry.replicas }}
  selector:
    matchLabels:
      app: hauler-registry
      {{- include "hauler.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: hauler-registry
        {{- include "hauler.selectorLabels" . | nindent 8 }}
    spec:
    {{- if and (or .Values.haulerJobs.remote .Values.haulerJobs.local) (or (and .Values.haulerJobs.local .Values.haulerJobs.local.store) (and .Values.haulerJobs.remote .Values.haulerJobs.remote.hauls (gt (len .Values.haulerJobs.remote.hauls) 0)) (and .Values.haulerJobs.remote .Values.haulerJobs.remote.manifests (gt (len .Values.haulerJobs.remote.manifests) 0))  (and .Values.haulerJobs.local .Values.haulerJobs.local.hauls (gt (len .Values.haulerJobs.local.hauls) 0)) (and .Values.haulerJobs.local .Values.haulerJobs.local.manifests (gt (len .Values.haulerJobs.local.manifests) 0))  ) }}
      initContainers:
        - name: wait-for-hauler-loader
          image: {{ .Values.hauler.initContainers.image.repository }}:{{ .Values.hauler.initContainers.image.tag }}
          imagePullPolicy: {{ .Values.hauler.initContainers.imagePullPolicy }}
          args: ["wait", "--for=condition=complete", "job", "hauler-loader", "--namespace", "{{ .Release.Namespace }}", "--timeout={{ .Values.hauler.initContainers.timeout }}"]
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
      {{- end }}
      containers:
        - name: hauler-registry
          image: {{ .Values.hauler.image.repository }}:{{ .Values.hauler.image.tag }}
          imagePullPolicy: {{ .Values.hauler.imagePullPolicy }}
          args: ["store", "serve", "registry", "--port", "{{ .Values.haulerRegistry.port }}"]
          ports:
            - containerPort: {{ .Values.haulerRegistry.port }}
          volumeMounts:
            - name: hauler-data
              mountPath: /store
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.haulerRegistry.port }}
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.haulerRegistry.port }}
            initialDelaySeconds: 10
            periodSeconds: 15
            failureThreshold: 5
          startupProbe:
            httpGet:
              path: /
              port: {{ .Values.haulerRegistry.port }}
            initialDelaySeconds: 15
            periodSeconds: 15
            failureThreshold: {{ .Values.haulerRegistry.delayStart | default 0 }}

      restartPolicy: Always
      serviceAccountName: hauler-service-account
      volumes:
        - name: hauler-data
          persistentVolumeClaim:
            claimName: hauler-data
{{- end }}
